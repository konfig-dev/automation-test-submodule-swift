//
// GreetingsAPI.swift
//
// Generated by Konfig
// https://konfigthis.com
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class GreetingsAPI {

    weak var client: AutomationTestWithSubmodulesClient?

    public init(client: AutomationTestWithSubmodulesClient) {
        self.client = client
    }

    /**
     Get a simple greeting!!!
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func helloSync(apiResponseQueue: DispatchQueue = AutomationTestWithSubmodulesAPI.apiResponseQueue, completion: @escaping ((_ data: HelloResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return helloWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a simple greeting!!!
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    private class func helloAsyncMappedParams() async throws -> HelloResponse {
        return try await withCheckedThrowingContinuation { continuation in
            helloWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get a simple greeting!!!
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open class func hello(
    ) async throws -> HelloResponse {
        return try await withCheckedThrowingContinuation { continuation in
            helloWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }


    /**
     Get a simple greeting!!!
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
    open func hello(
    ) async throws -> HelloResponse {
        return try await withCheckedThrowingContinuation { continuation in
            helloWithRequestBuilder().execute { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }



    /**
     Get a simple greeting!!!
     - GET /hello
     - returns: RequestBuilder<HelloResponse> 
     */
    open class func helloWithRequestBuilder(
    ) -> RequestBuilder<HelloResponse> {
        let basePath = AutomationTestWithSubmodulesAPI.basePath;
        let localVariablePath = "/hello"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            let localVariableRequestBuilder: RequestBuilder<HelloResponse>.Type = AutomationTestWithSubmodulesAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /hello")
    }

    /**
     Get a simple greeting!!!
     - GET /hello
     - returns: RequestBuilder<HelloResponse> 
     */
    open func helloWithRequestBuilder(
    ) -> RequestBuilder<HelloResponse> {
        let basePath = self.client!.basePath;
        let localVariablePath = "/hello"
        let localVariableURLString = basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        var localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        do {
            let localVariableRequestBuilder: RequestBuilder<HelloResponse>.Type = AutomationTestWithSubmodulesAPI.requestBuilderFactory.getBuilder()
            let URLString = localVariableUrlComponents?.string ?? localVariableURLString
            return localVariableRequestBuilder.init(method: "GET", URLString: URLString, parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
        } catch {
            print("Error: \(error)")
        }
        fatalError("Error: Unable to send request to GET /hello")
    }

}
